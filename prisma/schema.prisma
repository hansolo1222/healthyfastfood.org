generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model meal {
  id                 String     @id @default(uuid())
  name               String
  slug               String
  restaurantSlug     String
  calories           Int?
  totalFat           Decimal?
  saturatedFat       Decimal?
  transFat           Decimal?
  cholesterol        Decimal?
  sodium             Decimal?
  totalCarbohydrates Decimal?
  dietaryFiber       Decimal?
  sugar              Decimal?
  protein            Decimal?
  proteinPerCalorie  Decimal?
  proteinCarbRatio   Decimal?
  sodiumPerCalorie   Decimal?
  sodiumPerProtein   Decimal?
  vitaminA           Int?
  vitaminC           Int?
  calcium            Int?
  iron               Int?
  published          Boolean    @default(true)
  categoryName       String
  allergen_milk     Boolean?  @default(false)
  allergen_eggs      Boolean?  @default(false)
  allergen_fish      Boolean?  @default(false)
  allergen_shellfish Boolean?  @default(false)
  allergen_tree_nuts Boolean?  @default(false)
  allergen_peanuts   Boolean?  @default(false)
  allergen_wheat     Boolean?  @default(false)
  allergen_soy       Boolean?  @default(false)
  allergen_gluten    Boolean?  @default(false)
  allergensFalse     String[]
  allergensTrue      String[]
  ingredients        String?
  combinedSlug       String     @unique
  category           category   @relation(fields: [categoryName], references: [name])
  restaurant         restaurant @relation(fields: [restaurantSlug], references: [slug])
  variants           variant[]

  menu               menu?     @relation(fields: [menuRestaurantAndCountry], references: [restaurantAndCountry])
  menuRestaurantAndCountry String?

  @@unique([restaurantSlug, slug])
}

model menu {
  id             String  @id @default(uuid())
  meals          meal[]
  restaurant     restaurant @relation(fields: [restaurantSlug], references: [slug])
  restaurantSlug String
  country        country  @relation(fields: [countryCode], references: [code])
  countryCode    String
  restaurantAndCountry String @unique
  @@unique([restaurantSlug, countryCode])
}

model country {
  id           String   @id @default(uuid())
  code         String   @unique
  name         String
  menus        menu[]
}


model variant {
  id                 String   @id @default(uuid())
  variantName        String
  mealCombinedSlug   String
  meal               meal     @relation(fields: [mealCombinedSlug], references: [combinedSlug])
  variantSlug        String
  mealVariantCombinedSlug String @unique
  subvariants        subvariant[]
  calories           Int?
  totalFat           Decimal?
  saturatedFat       Decimal?
  transFat           Decimal?
  cholesterol        Decimal?
  sodium             Decimal?
  totalCarbohydrates Decimal?
  dietaryFiber       Decimal?
  sugar              Decimal?
  protein            Decimal?
  proteinPerCalorie  Decimal?
  proteinCarbRatio   Decimal?
  sodiumPerCalorie   Decimal?
  sodiumPerProtein   Decimal?
  vitaminA           Int?
  vitaminC           Int?
  calcium            Int?
  iron               Int?
  allergensFalse     String[]
  allergensTrue      String[]
  ingredients        String?
}

model subvariant {
  id               String   @id @default(uuid())
  subvariantName   String
  subvariantSlug   String
  variant          variant  @relation(fields: [mealVariantCombinedSlug], references: [mealVariantCombinedSlug])
  mealVariantCombinedSlug String
  fullSlug           String @unique

  calories           Int?
  totalFat           Decimal?
  saturatedFat       Decimal?
  transFat           Decimal?
  cholesterol        Decimal?
  sodium             Decimal?
  totalCarbohydrates Decimal?
  dietaryFiber       Decimal?
  sugar              Decimal?
  protein            Decimal?
  proteinPerCalorie  Decimal?
  proteinCarbRatio   Decimal?
  sodiumPerCalorie   Decimal?
  sodiumPerProtein   Decimal?
  vitaminA           Int?
  vitaminC           Int?
  calcium            Int?
  iron               Int?
  allergensFalse     String[]
  allergensTrue      String[]
  ingredients        String?
}

model restaurant {
  id                 Int    @id @default(autoincrement())
  name               String 
  slug               String @unique

  keyword            String?
  usVolume           Int? 
  globalVolume       Int?
  difficulty         Int?
  trafficPotential   Int?
  website            String?

  rank               Int?
  salesMillions      Int?

  originalLocation  String?
  originalCountry   String?
  founded           String?
  headquarters      String?
  locations         Int?
  areasServed       String[]

  segment       segment? @relation(fields: [segmentSlug], references: [slug])
  segmentSlug   String?

  // restaurantType  restaurantType? @relation(fields: [restaurantTypeSlug], references: [slug])
  restaurantTypeSlug   String?

  restaurantTypes restaurantType[]

  meals        meal[]
  menus        menu[]
}


model segment {
  id          String  @id @default(uuid())
  name        String @unique
  slug        String @unique
  restaurants restaurant[]
}

model restaurantType {
  id          String @id @default(uuid())
  name        String @unique
  slug        String @unique
  description String? @default("")
  restaurants restaurant[]
} 

model category {
  id                  String  @id @default(uuid())
  name                String  @unique
  slug                String  @unique
  meals               meal[]
  parentCategory      parentCategory? @relation(fields: [parentCategorySlug], references: [slug])
  parentCategorySlug  String?
  // parentCategory2     parentCategory? @relation(fields: [parentCategorySlug], references: [slug])
  // parentCategorySlug  String?
}


model parentCategory {
  id    String  @default(uuid())
  name  String  @unique
  slug  String @unique
  categories category[] 
}